// Code generated by mockery v2.42.1. DO NOT EDIT.

package exec

import (
	context "context"

	exec "github.com/crowdigit/exec"
	mock "github.com/stretchr/testify/mock"
)

// MockCommandProvider is an autogenerated mock type for the CommandProvider type
type MockCommandProvider struct {
	mock.Mock
}

type MockCommandProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCommandProvider) EXPECT() *MockCommandProvider_Expecter {
	return &MockCommandProvider_Expecter{mock: &_m.Mock}
}

// Command provides a mock function with given fields: opt
func (_m *MockCommandProvider) Command(opt exec.CommandOpts) exec.Command {
	ret := _m.Called(opt)

	if len(ret) == 0 {
		panic("no return value specified for Command")
	}

	var r0 exec.Command
	if rf, ok := ret.Get(0).(func(exec.CommandOpts) exec.Command); ok {
		r0 = rf(opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(exec.Command)
		}
	}

	return r0
}

// MockCommandProvider_Command_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Command'
type MockCommandProvider_Command_Call struct {
	*mock.Call
}

// Command is a helper method to define mock.On call
//   - opt exec.CommandOpts
func (_e *MockCommandProvider_Expecter) Command(opt interface{}) *MockCommandProvider_Command_Call {
	return &MockCommandProvider_Command_Call{Call: _e.mock.On("Command", opt)}
}

func (_c *MockCommandProvider_Command_Call) Run(run func(opt exec.CommandOpts)) *MockCommandProvider_Command_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(exec.CommandOpts))
	})
	return _c
}

func (_c *MockCommandProvider_Command_Call) Return(_a0 exec.Command) *MockCommandProvider_Command_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommandProvider_Command_Call) RunAndReturn(run func(exec.CommandOpts) exec.Command) *MockCommandProvider_Command_Call {
	_c.Call.Return(run)
	return _c
}

// CommandContext provides a mock function with given fields: ctx, opt
func (_m *MockCommandProvider) CommandContext(ctx context.Context, opt exec.CommandOpts) exec.Command {
	ret := _m.Called(ctx, opt)

	if len(ret) == 0 {
		panic("no return value specified for CommandContext")
	}

	var r0 exec.Command
	if rf, ok := ret.Get(0).(func(context.Context, exec.CommandOpts) exec.Command); ok {
		r0 = rf(ctx, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(exec.Command)
		}
	}

	return r0
}

// MockCommandProvider_CommandContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CommandContext'
type MockCommandProvider_CommandContext_Call struct {
	*mock.Call
}

// CommandContext is a helper method to define mock.On call
//   - ctx context.Context
//   - opt exec.CommandOpts
func (_e *MockCommandProvider_Expecter) CommandContext(ctx interface{}, opt interface{}) *MockCommandProvider_CommandContext_Call {
	return &MockCommandProvider_CommandContext_Call{Call: _e.mock.On("CommandContext", ctx, opt)}
}

func (_c *MockCommandProvider_CommandContext_Call) Run(run func(ctx context.Context, opt exec.CommandOpts)) *MockCommandProvider_CommandContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(exec.CommandOpts))
	})
	return _c
}

func (_c *MockCommandProvider_CommandContext_Call) Return(_a0 exec.Command) *MockCommandProvider_CommandContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommandProvider_CommandContext_Call) RunAndReturn(run func(context.Context, exec.CommandOpts) exec.Command) *MockCommandProvider_CommandContext_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCommandProvider creates a new instance of MockCommandProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCommandProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCommandProvider {
	mock := &MockCommandProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
